extends layout

block content
  .container.mx-auto.p-4
    h2.text-3xl.font-bold.mb-4 Объявления

    // Search and Filters
    .mb-4.bg-gray-100.p-4.rounded
      h3.text-xl.font-semibold.mb-2 Поиск и фильтры
      .grid.grid-cols-1(class='md:grid-cols-3 gap-4')
        .mb-4
          label.block.text-gray-700.mb-2 Поиск по ключевым словам
          input.w-full.p-2.border.rounded(type="text" id="search" placeholder="Введите ключевые слова" value=search)
        .mb-4
          label.block.text-gray-700.mb-2 Категория
          select.w-full.p-2.border.rounded(id="category")
            option(value="") Все категории
            each cat in categories
              option(value=cat.id selected=category==cat.id)= cat.name
        .mb-4#guideFields
          each field in guideFields
            .mb-4
              label.block.text-gray-700.mb-2= field.name
              select.w-full.p-2.border.rounded.guide-value-select(data-field-id=field.id)
                option(value="") Все #{field.name.toLowerCase()}
                each value in field.guide_values
                  option(value=value.id selected=guideValues&&guideValues.includes(value.id.toString()))= value.value
      .flex.space-x-2
        button.bg-blue-600.text-white.p-2.rounded#filterBtn Поиск
        button.bg-gray-300.text-black.p-2.rounded#clearBtn Очистить фильтры

    // Advertisements List
    #advertisements.grid.grid-cols-1(class='md:grid-cols-2 lg:grid-cols-3 gap-4')
      each ad in advertisements
        .border.p-4.rounded.shadow
          h3.text-xl.font-semibold
            a.text-blue-600.hover_underline(href=`/advertisement/${ad.id}`)= ad.title
          p= ad.guide_values.map(v => `${v.guide_field ? v.guide_field.name : 'Неизвестное поле'}: ${v.value}`).join(', ')
          p Категория: #{ad.category.name}
          p Автор: #{ad.user.login}

    script(src="https://code.jquery.com/jquery-3.6.0.min.js")
    script.
      $(document).ready(function() {
        // Store all advertisements
        const allAds = !{JSON.stringify(advertisements)};

        // Load guide fields when category changes
        $('#category').on('change', async function() {
          const categoryId = $(this).val();
          $('#guideFields').empty();
          if (!categoryId) {
            applyFilters(); // Apply filters with no guide fields
            return;
          }
          try {
            const response = await $.get(`/guide-values/${categoryId}`);
            response.forEach(field => {
              const select = $(`
                <div class="mb-4">
                  <label class="block text-gray-700 mb-2">${field.name}</label>
                  <select class="w-full p-2 border rounded guide-value-select" data-field-id="${field.id}">
                    <option value="">Все ${field.name.toLowerCase()}</option>
                    ${field.guide_values.map(v => `<option value="${v.id}">${v.value}</option>`).join('')}
                  </select>
                </div>
              `);
              $('#guideFields').append(select);
            });
            // Restore previously selected guide values
            const guideValues = !{JSON.stringify(guideValues || [])};
            if (guideValues.length) {
              $('.guide-value-select').each(function() {
                const select = $(this);
                guideValues.forEach(val => {
                  select.find(`option[value="${val}"]`).prop('selected', true);
                });
              });
            }
            applyFilters(); // Apply filters after loading fields
          } catch (error) {
            console.error('Error fetching guide fields:', error);
          }
        });

        // Apply client-side filters
        function applyFilters() {
          const search = $('#search').val().toLowerCase();
          const category = $('#category').val();
          const guideValues = $('.guide-value-select').map(function() {
            const val = $(this).val();
            return val ? parseInt(val) : null;
          }).get().filter(v => v !== null);
          console.log('Applying filters:', { search, category, guideValues }); // Debug log

          const filteredAds = allAds.filter(ad => {
            // Search filter
            if (search && !ad.title.toLowerCase().includes(search)) {
              return false;
            }
            // Category filter
            if (category && ad.categoryId !== parseInt(category)) {
              return false;
            }
            // Guide values filter
            if (guideValues.length) {
              const adGuideValueIds = ad.guide_values.map(gv => gv.id);
              return guideValues.every(id => adGuideValueIds.includes(id));
            }
            return true;
          });

          $('#advertisements').empty();
          if (filteredAds.length === 0) {
            $('#advertisements').append('<p class="text-gray-600">Объявления не найдены</p>');
          } else {
            filteredAds.forEach(ad => {
              const adHtml = `
                <div class="border p-4 rounded shadow">
                  <h3 class="text-xl font-semibold">
                    <a class="text-blue-600 hover:underline" href="/advertisement/${ad.id}">${ad.title}</a>
                  </h3>
                  <p>${ad.guide_values.map(v => `${v.guide_field ? v.guide_field.name : 'Неизвестное поле'}: ${v.value}`).join(', ')}</p>
                  <p>Категория: ${ad.category.name}</p>
                  <p>Автор: ${ad.user.login}</p>
                </div>
              `;
              $('#advertisements').append(adHtml);
            });
          }
        }

        // Filter button
        $('#filterBtn').on('click', function() {
          applyFilters();
        });

        // Clear filters
        $('#clearBtn').on('click', function() {
          $('#search').val('');
          $('#category').val('');
          $('#guideFields').empty();
          applyFilters();
        });

        // Trigger initial filter if query params exist
        if ($('#search').val() || $('#category').val()) {
          $('#category').trigger('change');
        } else {
          applyFilters(); // Initial render
        }
      });